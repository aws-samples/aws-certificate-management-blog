AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This AWS CloudFormation Template creates the necessary resources for an API
  action within ACM PCA can be sent to Security Hub
Resources:
  RootCA:
    Type: AWS::ACMPCA::CertificateAuthority
    Properties: 
      KeyAlgorithm: RSA_2048
      SigningAlgorithm: SHA256WITHRSA
      Subject: 
        CommonName: 'Organization Root CA'
      Type: ROOT
  CreationLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: ca_cert_creation
      RetentionInDays: 60
  CreationEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Certificate created from Root
      EventPattern:
        source:
          - aws.acm-pca
        detail-type:
          - ACM Private CA Certificate Issuance
        resources: [!GetAtt RootCA.Arn]

      State: ENABLED
      Targets:
        - Arn:
            'Fn::GetAtt':
              - CreationLogGroup
              - Arn
          Id: ca-cert-creation-log
        - Arn:
            'Fn::GetAtt':
              - LambdaCACreation
              - Arn
          Id: ca-cert-creation-lambda
  LambdaCACreationPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: LambdaCACreation
      Principal: events.amazonaws.com
      SourceArn:
        'Fn::GetAtt':
          - CreationEventRule
          - Arn
  LambdaCACreation:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: CertAuthCreation
      Handler: index.lambda_handler
      Runtime: python3.7
      Timeout: 60
      Role: !GetAtt LambdaRole.Arn
      Tags:
        - Key: workshop
          Value: acm-private-ca
      Code:
        ZipFile: |
          import json
          import boto3
          import datetime
          def lambda_handler(event, context):
            secHubClient = boto3.client('securityhub')
            accountNum = boto3.client('sts').get_caller_identity()['Account']
            my_session = boto3.session.Session()
            region = my_session.region_name
            caCertARN = event['resources'][0]
            CaArn = event['resources'][1]
            date = datetime.datetime.now().isoformat() + "Z"
            try:
                response = secHubClient.batch_import_findings(
                   Findings=[
                       {
                           "SchemaVersion": "2018-10-08",
                           "Id": region + "/" + accountNum + "/" + caCertARN,
                           "ProductArn": "arn:aws:securityhub:" + region + ":" + accountNum + ":product/" + accountNum + "/default",
                           "GeneratorId": caCertARN,
                           "AwsAccountId": accountNum,
                           "Types": [
                               "Unusual Behaviors"
                           ],
                           "CreatedAt": date,
                           "UpdatedAt": date,
                           "Severity": {
                               "Normalized": 60
                           },
                           "Title": "Private CA Certificate Creation",
                           "Description": "A Private CA certificate was issued in AWS Certificate Manager Private CA",
                           "Remediation": {
                               "Recommendation": {
                                   "Text": "Verify this CA certificate creation was taken by a privileged user",
                                   "Url": "https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaAuthAccess.html"
                               }
                           },
                           "ProductFields": {
                               "ProductName": "ACM PCA"
                           },
                           "Resources": [
                               {
                                   "Details": {
                                       "Other": {
                                          "CAArn": CaArn,
                                          "CertARN": caCertARN
                                       }
                                   },
                                   "Type": "Other",
                                   "Id": caCertARN,
                                   "Region": region,
                                   "Partition": "aws"
                              }
                           ],
                           "RecordState": "ACTIVE"
                       },
                   ]
                )
            except ValueError:
                print(ValueError)
                
            print(response)
            return 200
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LambdaSecHubRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
      Policies:
        - PolicyName: sechub-batch-import
          PolicyDocument: 
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 'securityhub:BatchImportFindings'
                  Resource: '*'
  S3CrlBucket:
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub 'acm-private-ca-crl-bucket-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      Tags:
        - Key: workshop
          Value: acm-private-ca
    Type: 'AWS::S3::Bucket'
  SampleBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket:
        Ref: S3CrlBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
              - 's3:GetBucketLocation'
              - 's3:GetBucketAcl'
            Effect: Allow
            Principal:
              Service:
                - acm-pca.amazonaws.com
            Resource:
              - 'Fn::Join':
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: S3CrlBucket
                    - /*
              - 'Fn::Join':
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: S3CrlBucket
